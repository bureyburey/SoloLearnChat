{
  "rules": {
    ".read": false,
    ".write": false,
      "connected":{
       ".read": true,
         "$username": {
         ".write":"(newData.exists() || !newData.exists()) && !$username.contains('<script>')"
         }
      },
        "mod_list":{
          ".read": false,
          ".write":false,
            					// old entry cannot exists							// only an existing mod can add a new mod
            					// to add mod use inside firebase.auth().onAuthStateChanged(...) or after you been authenticated
            					// db_ref.ref("mod_list").child(<new mod uid string>).set({username:loginName,lastOnline:firebase.database.ServerValue.TIMESTAMP});
//           ".write": "(!data.exists() && newData.exists()) && root.child('mod_list').child(auth.uid).exists()",
            "$mod_id":{
//               ".read": false,
//           		".write": false
            }
        },
      "user_list":{
          ".read": false,
        						// create new user id
        ".write": "(!data.exists() && newData.exists())",
          "$user_id":{
          ".read":true,
            					// add new user												// update user entry
        ".write": "auth != null && ((!data.exists() && newData.exists()) || (data.exists() && newData.exists()))",
        ".validate": "newData.hasChildren(['username','lastOnline'])",
          "username":{
            ".validate": "newData.isString() && newData.val().length <= 20 && newData.val().length > 1"
          },
          "lastOnline":{
            ".validate": "newData.isNumber()"
          }  
        }
      },
      "chat_messages":{
      ".read": true,
      ".indexOn": ["createTime"],
      "$message": {

      	".read":"auth !== null",
          				// (only mods can edit/delete)										OR	(authenticated user AND old data does not exists OR delete if the user is the owner of the post OR edit if the user is the owner of the post)
        ".write": "root.child('mod_list').child(auth.uid).exists() ||  auth != null && (!data.exists() || (!newData.exists() && data.child('user_id').val() === auth.uid) || (newData.exists() && data.child('user_id').val() === auth.uid))",// && newData.hasChild('user_id')",
        ".validate": "newData.hasChildren(['author', 'user_id', 'body', 'createTime', 'editTime'])",
        "author": {
          ".validate": "newData.isString() && newData.val().length <= 20 && newData.val().length > 0"
        },
        "user_id":{
          ".validate": "root.child('user_list').child(newData.val()).exists()"
        },
        "body": {
          ".validate": "newData.isString() && newData.val().length <= 256 && newData.val().length > 0"
        },
        "createTime": {
          ".validate": "newData.isNumber()"
        },
        "editTime": {
          ".validate": "newData.isNumber()"
        }
      }   
    }
  }
}
